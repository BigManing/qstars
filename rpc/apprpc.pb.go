// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: apprpc.proto

package rpc

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type KVSetRequest struct {
	Addr                 string   `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KVSetRequest) Reset()         { *m = KVSetRequest{} }
func (m *KVSetRequest) String() string { return proto.CompactTextString(m) }
func (*KVSetRequest) ProtoMessage()    {}
func (*KVSetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_apprpc_d876618675439aa1, []int{0}
}
func (m *KVSetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KVSetRequest.Unmarshal(m, b)
}
func (m *KVSetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KVSetRequest.Marshal(b, m, deterministic)
}
func (dst *KVSetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KVSetRequest.Merge(dst, src)
}
func (m *KVSetRequest) XXX_Size() int {
	return xxx_messageInfo_KVSetRequest.Size(m)
}
func (m *KVSetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KVSetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KVSetRequest proto.InternalMessageInfo

func (m *KVSetRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *KVSetRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KVSetRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// The response message containing the greetings
type KVGetReply struct {
	Addr                 string   `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	ResultCode           string   `protobuf:"bytes,4,opt,name=resultCode,proto3" json:"resultCode,omitempty"`
	Reason               string   `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KVGetReply) Reset()         { *m = KVGetReply{} }
func (m *KVGetReply) String() string { return proto.CompactTextString(m) }
func (*KVGetReply) ProtoMessage()    {}
func (*KVGetReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_apprpc_d876618675439aa1, []int{1}
}
func (m *KVGetReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KVGetReply.Unmarshal(m, b)
}
func (m *KVGetReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KVGetReply.Marshal(b, m, deterministic)
}
func (dst *KVGetReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KVGetReply.Merge(dst, src)
}
func (m *KVGetReply) XXX_Size() int {
	return xxx_messageInfo_KVGetReply.Size(m)
}
func (m *KVGetReply) XXX_DiscardUnknown() {
	xxx_messageInfo_KVGetReply.DiscardUnknown(m)
}

var xxx_messageInfo_KVGetReply proto.InternalMessageInfo

func (m *KVGetReply) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *KVGetReply) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KVGetReply) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *KVGetReply) GetResultCode() string {
	if m != nil {
		return m.ResultCode
	}
	return ""
}

func (m *KVGetReply) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// The response message containing the greetings
type GeneralReply struct {
	ResultCode           string   `protobuf:"bytes,1,opt,name=resultCode,proto3" json:"resultCode,omitempty"`
	Reason               string   `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GeneralReply) Reset()         { *m = GeneralReply{} }
func (m *GeneralReply) String() string { return proto.CompactTextString(m) }
func (*GeneralReply) ProtoMessage()    {}
func (*GeneralReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_apprpc_d876618675439aa1, []int{2}
}
func (m *GeneralReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeneralReply.Unmarshal(m, b)
}
func (m *GeneralReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeneralReply.Marshal(b, m, deterministic)
}
func (dst *GeneralReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeneralReply.Merge(dst, src)
}
func (m *GeneralReply) XXX_Size() int {
	return xxx_messageInfo_GeneralReply.Size(m)
}
func (m *GeneralReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GeneralReply.DiscardUnknown(m)
}

var xxx_messageInfo_GeneralReply proto.InternalMessageInfo

func (m *GeneralReply) GetResultCode() string {
	if m != nil {
		return m.ResultCode
	}
	return ""
}

func (m *GeneralReply) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// The request message containing the user's name.
type QueryRequest struct {
	Addr                 string   `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryRequest) Reset()         { *m = QueryRequest{} }
func (m *QueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()    {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_apprpc_d876618675439aa1, []int{3}
}
func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryRequest.Unmarshal(m, b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
}
func (dst *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(dst, src)
}
func (m *QueryRequest) XXX_Size() int {
	return xxx_messageInfo_QueryRequest.Size(m)
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *QueryRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *QueryRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// The request message containing the user's name.
type QueryResponse struct {
	Addr                 string   `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Qosmount             int64    `protobuf:"varint,2,opt,name=qosmount,proto3" json:"qosmount,omitempty"`
	Xymount              int64    `protobuf:"varint,3,opt,name=xymount,proto3" json:"xymount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryResponse) Reset()         { *m = QueryResponse{} }
func (m *QueryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()    {}
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_apprpc_d876618675439aa1, []int{4}
}
func (m *QueryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryResponse.Unmarshal(m, b)
}
func (m *QueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryResponse.Marshal(b, m, deterministic)
}
func (dst *QueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResponse.Merge(dst, src)
}
func (m *QueryResponse) XXX_Size() int {
	return xxx_messageInfo_QueryResponse.Size(m)
}
func (m *QueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResponse proto.InternalMessageInfo

func (m *QueryResponse) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *QueryResponse) GetQosmount() int64 {
	if m != nil {
		return m.Qosmount
	}
	return 0
}

func (m *QueryResponse) GetXymount() int64 {
	if m != nil {
		return m.Xymount
	}
	return 0
}

// The request message containing the user's name.
type MintRequest struct {
	Addr                 string   `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Publickey            string   `protobuf:"bytes,2,opt,name=publickey,proto3" json:"publickey,omitempty"`
	Privatekey           string   `protobuf:"bytes,3,opt,name=privatekey,proto3" json:"privatekey,omitempty"`
	Xymount              int64    `protobuf:"varint,4,opt,name=xymount,proto3" json:"xymount,omitempty"`
	Maxfee               int64    `protobuf:"varint,5,opt,name=maxfee,proto3" json:"maxfee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MintRequest) Reset()         { *m = MintRequest{} }
func (m *MintRequest) String() string { return proto.CompactTextString(m) }
func (*MintRequest) ProtoMessage()    {}
func (*MintRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_apprpc_d876618675439aa1, []int{5}
}
func (m *MintRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MintRequest.Unmarshal(m, b)
}
func (m *MintRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MintRequest.Marshal(b, m, deterministic)
}
func (dst *MintRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintRequest.Merge(dst, src)
}
func (m *MintRequest) XXX_Size() int {
	return xxx_messageInfo_MintRequest.Size(m)
}
func (m *MintRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MintRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MintRequest proto.InternalMessageInfo

func (m *MintRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *MintRequest) GetPublickey() string {
	if m != nil {
		return m.Publickey
	}
	return ""
}

func (m *MintRequest) GetPrivatekey() string {
	if m != nil {
		return m.Privatekey
	}
	return ""
}

func (m *MintRequest) GetXymount() int64 {
	if m != nil {
		return m.Xymount
	}
	return 0
}

func (m *MintRequest) GetMaxfee() int64 {
	if m != nil {
		return m.Maxfee
	}
	return 0
}

// The request message containing the user's name.
type CoinTransferRequest struct {
	Addr                 string   `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Publickey            string   `protobuf:"bytes,2,opt,name=publickey,proto3" json:"publickey,omitempty"`
	Privatekey           string   `protobuf:"bytes,3,opt,name=privatekey,proto3" json:"privatekey,omitempty"`
	QOSmount             int64    `protobuf:"varint,4,opt,name=QOSmount,proto3" json:"QOSmount,omitempty"`
	Xymount              int64    `protobuf:"varint,5,opt,name=xymount,proto3" json:"xymount,omitempty"`
	Maxfee               int64    `protobuf:"varint,6,opt,name=maxfee,proto3" json:"maxfee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoinTransferRequest) Reset()         { *m = CoinTransferRequest{} }
func (m *CoinTransferRequest) String() string { return proto.CompactTextString(m) }
func (*CoinTransferRequest) ProtoMessage()    {}
func (*CoinTransferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_apprpc_d876618675439aa1, []int{6}
}
func (m *CoinTransferRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoinTransferRequest.Unmarshal(m, b)
}
func (m *CoinTransferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoinTransferRequest.Marshal(b, m, deterministic)
}
func (dst *CoinTransferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinTransferRequest.Merge(dst, src)
}
func (m *CoinTransferRequest) XXX_Size() int {
	return xxx_messageInfo_CoinTransferRequest.Size(m)
}
func (m *CoinTransferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinTransferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CoinTransferRequest proto.InternalMessageInfo

func (m *CoinTransferRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *CoinTransferRequest) GetPublickey() string {
	if m != nil {
		return m.Publickey
	}
	return ""
}

func (m *CoinTransferRequest) GetPrivatekey() string {
	if m != nil {
		return m.Privatekey
	}
	return ""
}

func (m *CoinTransferRequest) GetQOSmount() int64 {
	if m != nil {
		return m.QOSmount
	}
	return 0
}

func (m *CoinTransferRequest) GetXymount() int64 {
	if m != nil {
		return m.Xymount
	}
	return 0
}

func (m *CoinTransferRequest) GetMaxfee() int64 {
	if m != nil {
		return m.Maxfee
	}
	return 0
}

func init() {
	proto.RegisterType((*KVSetRequest)(nil), "rpc.KVSetRequest")
	proto.RegisterType((*KVGetReply)(nil), "rpc.KVGetReply")
	proto.RegisterType((*GeneralReply)(nil), "rpc.GeneralReply")
	proto.RegisterType((*QueryRequest)(nil), "rpc.QueryRequest")
	proto.RegisterType((*QueryResponse)(nil), "rpc.QueryResponse")
	proto.RegisterType((*MintRequest)(nil), "rpc.MintRequest")
	proto.RegisterType((*CoinTransferRequest)(nil), "rpc.CoinTransferRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QSCAppInterfaceClient is the client API for QSCAppInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QSCAppInterfaceClient interface {
	// set key-value
	QSCKVStoreSet(ctx context.Context, in *KVSetRequest, opts ...grpc.CallOption) (*GeneralReply, error)
	// get key-value
	QSCKVStoreGet(ctx context.Context, in *KVSetRequest, opts ...grpc.CallOption) (*KVGetReply, error)
	// query account
	QSCQueryAccount(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryRequest, error)
	// mint coin
	QSCMintCoin(ctx context.Context, in *MintRequest, opts ...grpc.CallOption) (*GeneralReply, error)
	// QSC transfer
	QSCtransfer(ctx context.Context, in *CoinTransferRequest, opts ...grpc.CallOption) (*GeneralReply, error)
	// QOS to QSC transfer
	QOStoQSCtransfer(ctx context.Context, in *CoinTransferRequest, opts ...grpc.CallOption) (*GeneralReply, error)
	// QSC to QOS transfer
	QSCtoQOStransfer(ctx context.Context, in *CoinTransferRequest, opts ...grpc.CallOption) (*GeneralReply, error)
}

type qSCAppInterfaceClient struct {
	cc *grpc.ClientConn
}

func NewQSCAppInterfaceClient(cc *grpc.ClientConn) QSCAppInterfaceClient {
	return &qSCAppInterfaceClient{cc}
}

func (c *qSCAppInterfaceClient) QSCKVStoreSet(ctx context.Context, in *KVSetRequest, opts ...grpc.CallOption) (*GeneralReply, error) {
	out := new(GeneralReply)
	err := c.cc.Invoke(ctx, "/rpc.QSCAppInterface/QSCKVStoreSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qSCAppInterfaceClient) QSCKVStoreGet(ctx context.Context, in *KVSetRequest, opts ...grpc.CallOption) (*KVGetReply, error) {
	out := new(KVGetReply)
	err := c.cc.Invoke(ctx, "/rpc.QSCAppInterface/QSCKVStoreGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qSCAppInterfaceClient) QSCQueryAccount(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryRequest, error) {
	out := new(QueryRequest)
	err := c.cc.Invoke(ctx, "/rpc.QSCAppInterface/QSCQueryAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qSCAppInterfaceClient) QSCMintCoin(ctx context.Context, in *MintRequest, opts ...grpc.CallOption) (*GeneralReply, error) {
	out := new(GeneralReply)
	err := c.cc.Invoke(ctx, "/rpc.QSCAppInterface/QSCMintCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qSCAppInterfaceClient) QSCtransfer(ctx context.Context, in *CoinTransferRequest, opts ...grpc.CallOption) (*GeneralReply, error) {
	out := new(GeneralReply)
	err := c.cc.Invoke(ctx, "/rpc.QSCAppInterface/QSCtransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qSCAppInterfaceClient) QOStoQSCtransfer(ctx context.Context, in *CoinTransferRequest, opts ...grpc.CallOption) (*GeneralReply, error) {
	out := new(GeneralReply)
	err := c.cc.Invoke(ctx, "/rpc.QSCAppInterface/QOStoQSCtransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qSCAppInterfaceClient) QSCtoQOStransfer(ctx context.Context, in *CoinTransferRequest, opts ...grpc.CallOption) (*GeneralReply, error) {
	out := new(GeneralReply)
	err := c.cc.Invoke(ctx, "/rpc.QSCAppInterface/QSCtoQOStransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QSCAppInterfaceServer is the server API for QSCAppInterface service.
type QSCAppInterfaceServer interface {
	// set key-value
	QSCKVStoreSet(context.Context, *KVSetRequest) (*GeneralReply, error)
	// get key-value
	QSCKVStoreGet(context.Context, *KVSetRequest) (*KVGetReply, error)
	// query account
	QSCQueryAccount(context.Context, *QueryRequest) (*QueryRequest, error)
	// mint coin
	QSCMintCoin(context.Context, *MintRequest) (*GeneralReply, error)
	// QSC transfer
	QSCtransfer(context.Context, *CoinTransferRequest) (*GeneralReply, error)
	// QOS to QSC transfer
	QOStoQSCtransfer(context.Context, *CoinTransferRequest) (*GeneralReply, error)
	// QSC to QOS transfer
	QSCtoQOStransfer(context.Context, *CoinTransferRequest) (*GeneralReply, error)
}

func RegisterQSCAppInterfaceServer(s *grpc.Server, srv QSCAppInterfaceServer) {
	s.RegisterService(&_QSCAppInterface_serviceDesc, srv)
}

func _QSCAppInterface_QSCKVStoreSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QSCAppInterfaceServer).QSCKVStoreSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QSCAppInterface/QSCKVStoreSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QSCAppInterfaceServer).QSCKVStoreSet(ctx, req.(*KVSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QSCAppInterface_QSCKVStoreGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QSCAppInterfaceServer).QSCKVStoreGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QSCAppInterface/QSCKVStoreGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QSCAppInterfaceServer).QSCKVStoreGet(ctx, req.(*KVSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QSCAppInterface_QSCQueryAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QSCAppInterfaceServer).QSCQueryAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QSCAppInterface/QSCQueryAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QSCAppInterfaceServer).QSCQueryAccount(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QSCAppInterface_QSCMintCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QSCAppInterfaceServer).QSCMintCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QSCAppInterface/QSCMintCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QSCAppInterfaceServer).QSCMintCoin(ctx, req.(*MintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QSCAppInterface_QSCtransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QSCAppInterfaceServer).QSCtransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QSCAppInterface/QSCtransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QSCAppInterfaceServer).QSCtransfer(ctx, req.(*CoinTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QSCAppInterface_QOStoQSCtransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QSCAppInterfaceServer).QOStoQSCtransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QSCAppInterface/QOStoQSCtransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QSCAppInterfaceServer).QOStoQSCtransfer(ctx, req.(*CoinTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QSCAppInterface_QSCtoQOStransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QSCAppInterfaceServer).QSCtoQOStransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QSCAppInterface/QSCtoQOStransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QSCAppInterfaceServer).QSCtoQOStransfer(ctx, req.(*CoinTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QSCAppInterface_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.QSCAppInterface",
	HandlerType: (*QSCAppInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QSCKVStoreSet",
			Handler:    _QSCAppInterface_QSCKVStoreSet_Handler,
		},
		{
			MethodName: "QSCKVStoreGet",
			Handler:    _QSCAppInterface_QSCKVStoreGet_Handler,
		},
		{
			MethodName: "QSCQueryAccount",
			Handler:    _QSCAppInterface_QSCQueryAccount_Handler,
		},
		{
			MethodName: "QSCMintCoin",
			Handler:    _QSCAppInterface_QSCMintCoin_Handler,
		},
		{
			MethodName: "QSCtransfer",
			Handler:    _QSCAppInterface_QSCtransfer_Handler,
		},
		{
			MethodName: "QOStoQSCtransfer",
			Handler:    _QSCAppInterface_QOStoQSCtransfer_Handler,
		},
		{
			MethodName: "QSCtoQOStransfer",
			Handler:    _QSCAppInterface_QSCtoQOStransfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apprpc.proto",
}

func init() { proto.RegisterFile("apprpc.proto", fileDescriptor_apprpc_d876618675439aa1) }

var fileDescriptor_apprpc_d876618675439aa1 = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x5d, 0x6b, 0xd4, 0x40,
	0x14, 0xdd, 0x34, 0xbb, 0x6b, 0x7b, 0x9b, 0xd2, 0x75, 0x14, 0x09, 0x41, 0x44, 0xe6, 0xc9, 0xa7,
	0x3e, 0xf8, 0x81, 0x08, 0xbe, 0x2c, 0x01, 0x17, 0xbb, 0x48, 0x49, 0x46, 0x16, 0x7c, 0x9c, 0x66,
	0xef, 0x42, 0x30, 0x9d, 0x99, 0x4e, 0x26, 0xa5, 0x79, 0xf3, 0x2f, 0xf8, 0x63, 0xf4, 0xf7, 0xc9,
	0x4c, 0xd2, 0x76, 0x16, 0x63, 0x1f, 0x5c, 0x7d, 0x9b, 0x73, 0xee, 0xdc, 0x33, 0x87, 0xfb, 0x31,
	0x10, 0x71, 0xa5, 0xb4, 0x2a, 0x4e, 0x94, 0x96, 0x46, 0x92, 0x50, 0xab, 0x82, 0x9e, 0x42, 0xb4,
	0x5c, 0x31, 0x34, 0x39, 0x5e, 0x36, 0x58, 0x1b, 0x42, 0x60, 0xcc, 0xd7, 0x6b, 0x1d, 0x07, 0xcf,
	0x83, 0x17, 0x07, 0xb9, 0x3b, 0x93, 0x19, 0x84, 0x5f, 0xb1, 0x8d, 0xf7, 0x1c, 0x65, 0x8f, 0xe4,
	0x31, 0x4c, 0xae, 0x78, 0xd5, 0x60, 0x1c, 0x3a, 0xae, 0x03, 0xf4, 0x5b, 0x00, 0xb0, 0x5c, 0x2d,
	0xac, 0x98, 0xaa, 0xda, 0x5d, 0xa4, 0xc8, 0x33, 0x00, 0x8d, 0x75, 0x53, 0x99, 0x54, 0xae, 0x31,
	0x1e, 0xbb, 0x90, 0xc7, 0x90, 0x27, 0x30, 0xd5, 0xc8, 0x6b, 0x29, 0xe2, 0x89, 0x8b, 0xf5, 0x88,
	0x7e, 0x80, 0x68, 0x81, 0x02, 0x35, 0xaf, 0x3a, 0x0f, 0xdb, 0x3a, 0xc1, 0x3d, 0x3a, 0x7b, 0x5b,
	0x3a, 0xa7, 0x10, 0x65, 0x0d, 0xea, 0xf6, 0x5f, 0x94, 0xe5, 0x0b, 0x1c, 0xf5, 0x5a, 0xb5, 0x92,
	0xa2, 0xc6, 0x41, 0xb1, 0x04, 0xf6, 0x2f, 0x65, 0x7d, 0x21, 0x1b, 0x61, 0x9c, 0x62, 0x98, 0xdf,
	0x62, 0x12, 0xc3, 0x83, 0xeb, 0xb6, 0x0b, 0x85, 0x2e, 0x74, 0x03, 0xe9, 0xf7, 0x00, 0x0e, 0x3f,
	0x95, 0xe2, 0xde, 0xee, 0x3d, 0x85, 0x03, 0xd5, 0x9c, 0x57, 0x65, 0x71, 0x67, 0xf6, 0x8e, 0xb0,
	0x05, 0x52, 0xba, 0xbc, 0xe2, 0x06, 0x6d, 0xb8, 0xf3, 0xed, 0x31, 0xfe, 0xdb, 0xe3, 0xad, 0xb7,
	0x6d, 0xe9, 0x2e, 0xf8, 0xf5, 0x06, 0xd1, 0xb5, 0x20, 0xcc, 0x7b, 0x44, 0x7f, 0x04, 0xf0, 0x28,
	0x95, 0xa5, 0xf8, 0xac, 0xb9, 0xa8, 0x37, 0xa8, 0xff, 0x9f, 0xb7, 0x04, 0xf6, 0xb3, 0x33, 0xe6,
	0x9b, 0xbb, 0xc5, 0xbe, 0xef, 0xc9, 0x9f, 0x7c, 0x4f, 0x7d, 0xdf, 0x2f, 0x7f, 0x86, 0x70, 0x9c,
	0xb1, 0x74, 0xae, 0xd4, 0x47, 0x61, 0x50, 0x6f, 0x78, 0x81, 0xe4, 0x2d, 0x1c, 0x65, 0x2c, 0x5d,
	0xae, 0x98, 0x91, 0x1a, 0x19, 0x1a, 0xf2, 0xf0, 0xc4, 0xee, 0x8f, 0xbf, 0x31, 0x49, 0x47, 0xf9,
	0x53, 0x47, 0x47, 0xe4, 0x8d, 0x9f, 0xb8, 0x18, 0x4e, 0x3c, 0xee, 0xa9, 0x9b, 0x85, 0xa1, 0x23,
	0xf2, 0xce, 0x59, 0x70, 0xd3, 0x32, 0x2f, 0x0a, 0x67, 0xb7, 0x4b, 0xf4, 0x87, 0x31, 0xf9, 0x9d,
	0xa2, 0x23, 0xf2, 0x1a, 0x0e, 0x33, 0x96, 0xda, 0x61, 0xb0, 0xc5, 0x27, 0x33, 0x77, 0xc7, 0x9b,
	0x8d, 0x61, 0x9f, 0xef, 0x5d, 0x96, 0xe9, 0x5b, 0x45, 0x62, 0x77, 0x67, 0xa0, 0x7b, 0xc3, 0xd9,
	0x73, 0x98, 0x65, 0x67, 0xcc, 0xc8, 0x1d, 0x25, 0x58, 0x6a, 0xa4, 0xd5, 0xf9, 0x3b, 0x89, 0xf3,
	0xa9, 0xfb, 0xce, 0x5e, 0xfd, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x87, 0x3d, 0xde, 0x88, 0xde, 0x04,
	0x00, 0x00,
}
